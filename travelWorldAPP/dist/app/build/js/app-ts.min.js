var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var appConfig = {
    appName: "travel_World",
    version: "0.0.1",
    auth_token: "travel_world_token",
    auth_sistema_contexto: "travel_world_user",
    testMode: false,
    defaultRoute: "/",
    rootServiceRoute: "http://localhost:51240/",
    serviceUrls: function () {
        return {
            autenticacao: {
                sistema: appConfig.rootServiceRoute + "api/security/token"
            },
            category: {
                listAll: appConfig.rootServiceRoute + "api/categories",
                executaControleAndamentoTarefa: appConfig.rootServiceRoute + "api/workflow/ExecutaControleAndamentoTarefa",
                executaControleAndamentoTarefas: appConfig.rootServiceRoute + "api/workflow/ExecutaControleAndamentoTarefas",
                deleteCategory: appConfig.rootServiceRoute + "api/categories",
                deleteAlotCategories: appConfig.rootServiceRoute + "api/categories/deleteAlot",
                editCategory: appConfig.rootServiceRoute + "api/categories/update",
                saveCategory: appConfig.rootServiceRoute + "api/categories/create"
            },
            city: {
                listAll: appConfig.rootServiceRoute + "api/cities",
                deleteCity: appConfig.rootServiceRoute + "api/",
                editCity: appConfig.rootServiceRoute + "api/cities/update",
                saveCity: appConfig.rootServiceRoute + "api/cities/create",
                deleteAlotCity: appConfig.rootServiceRoute + "api/cities/deleteAlot"
            },
            continent: {
                listAll: appConfig.rootServiceRoute + "api/continent/listAll",
                deleteContinent: appConfig.rootServiceRoute + "api/continent/delete",
                editContinent: appConfig.rootServiceRoute + "api/continent/update",
                saveContinent: appConfig.rootServiceRoute + "api/continent/create",
                deleteAlotContinent: appConfig.rootServiceRoute + "api/continent/deleteAlot"
            },
            country: {
                listAll: appConfig.rootServiceRoute + "api/countries/listAll",
                deleteCountry: appConfig.rootServiceRoute + "api/countries/delete",
                editCountry: appConfig.rootServiceRoute + "api/countries/update",
                saveCountry: appConfig.rootServiceRoute + "api/countries/create",
                deleteAlotCountry: appConfig.rootServiceRoute + "api/countries/deleteAlot"
            },
        };
    }
};
var Travel_World;
(function (Travel_World) {
    'use strict';
    var modules = new Array();
    modules.push('ngRoute');
    modules.push('ngTouch');
    modules.push('ngAnimate');
    modules.push('ngMessages');
    modules.push('ngMaterial');
    modules.push('md.data.table');
    modules.push('ui.bootstrap');
    modules.push('toastr');
    modules.push('cl.paging');
    angular.module(appConfig.appName, modules);
})(Travel_World || (Travel_World = {}));
var Travel_World;
(function (Travel_World) {
    'use strict';
    function config($routeProvider, $mdThemingProvider) {
        $routeProvider
            .when("/", {
            templateUrl: "app/views/home.html",
            controller: "HomeController",
            controllerAs: "vm"
        })
            .when("/categorias", {
            templateUrl: "app/views/categoria/categorias.html",
            controller: "CategoryController",
            controllerAs: "vm"
        })
            .when("/continentes", {
            templateUrl: "app/views/continent/continents.html",
            controller: "ContinentController",
            controllerAs: "vm"
        })
            .when("/paises", {
            templateUrl: "app/views/country/countries.html",
            controller: "CountryController",
            controllerAs: "vm"
        })
            .when("/cidades", {
            templateUrl: "app/views/city/cities.html",
            controller: "CityController",
            controllerAs: "vm"
        })
            .when("/login", {
            templateUrl: "app/views/autenticacao/login.html",
            controller: "LoginController",
            controllerAs: "vm"
        })
            .when("/logout", {
            templateUrl: "app/views/autenticacao/login.html",
            controller: "LogoutController",
            controllerAs: "vm"
        })
            .otherwise({
            templateUrl: "app/views/shared/404.html",
            controller: "SharedController",
            controllerAs: "vm"
        });
    }
    config.$inject = ['$routeProvider'];
    angular.module(appConfig.appName).config(config);
})(Travel_World || (Travel_World = {}));
var Travel_World;
(function (Travel_World) {
    var SosUsuario = (function () {
        function SosUsuario() {
        }
        return SosUsuario;
    }());
    Travel_World.SosUsuario = SosUsuario;
})(Travel_World || (Travel_World = {}));
var Travel_World;
(function (Travel_World) {
    var SistemaContexto = (function () {
        function SistemaContexto() {
        }
        return SistemaContexto;
    }());
    Travel_World.SistemaContexto = SistemaContexto;
})(Travel_World || (Travel_World = {}));
var Travel_World;
(function (Travel_World) {
    var Post = (function () {
        function Post() {
        }
        return Post;
    }());
    Travel_World.Post = Post;
})(Travel_World || (Travel_World = {}));
var Travel_World;
(function (Travel_World) {
    var Category = (function () {
        function Category() {
        }
        return Category;
    }());
    Travel_World.Category = Category;
})(Travel_World || (Travel_World = {}));
var Travel_World;
(function (Travel_World) {
    var Continent = (function () {
        function Continent() {
        }
        return Continent;
    }());
    Travel_World.Continent = Continent;
})(Travel_World || (Travel_World = {}));
var Travel_World;
(function (Travel_World) {
    var Country = (function () {
        function Country() {
        }
        return Country;
    }());
    Travel_World.Country = Country;
})(Travel_World || (Travel_World = {}));
var Travel_World;
(function (Travel_World) {
    var City = (function () {
        function City() {
        }
        return City;
    }());
    Travel_World.City = City;
})(Travel_World || (Travel_World = {}));
var Travel_World;
(function (Travel_World) {
    var LoginModel = (function () {
        function LoginModel(email, password) {
            this.email = email;
            this.password = password;
        }
        return LoginModel;
    }());
    Travel_World.LoginModel = LoginModel;
})(Travel_World || (Travel_World = {}));
var Travel_World;
(function (Travel_World) {
    var AppServiceBase = (function () {
        function AppServiceBase($rootScope, $http) {
            this.rootScope = $rootScope;
            this.httpService = $http;
        }
        AppServiceBase.prototype.handlerResponded = function (response, params) {
            response.data.requestParams = params;
            return response.data;
        };
        AppServiceBase.prototype.getByIdFromUrl = function (url, id) {
            var _this = this;
            var result = this.httpService.get(url + '/' + id, this.rootScope.header)
                .then(function (response) { return _this.handlerResponded(response, id); });
            return result;
        };
        AppServiceBase.prototype.listAllFromUrl = function (url) {
            var _this = this;
            var result = this.httpService.get(url, this.rootScope.header)
                .then(function (response) { return _this.handlerResponded(response); });
            return result;
        };
        AppServiceBase.prototype.listAllByParamFromUrl = function (url, param) {
            var _this = this;
            var result = this.httpService.get(url + "/" + param, this.rootScope.header)
                .then(function (response) { return _this.handlerResponded(response); });
            return result;
        };
        AppServiceBase.prototype.createByUrl = function (url, obj) {
            var _this = this;
            var result = this.httpService.put(url, obj, this.rootScope.header)
                .then(function (response) { return _this.handlerResponded(response); });
            return result;
        };
        AppServiceBase.prototype.updateByUrl = function (url, obj) {
            var _this = this;
            var result = this.httpService.put(url, obj, this.rootScope.header)
                .then(function (response) { return _this.handlerResponded(response); });
            return result;
        };
        AppServiceBase.prototype.removeByUrl = function (url, id) {
            var _this = this;
            var result = this.httpService.delete(url + "/" + id, this.rootScope.header)
                .then(function (response) { return _this.handlerResponded(response); });
            return result;
        };
        AppServiceBase.prototype.getFromUrl = function (url, params) {
            var _this = this;
            var result = this.httpService.get(url + (params ? params : ""), this.rootScope.header)
                .then(function (response) { return _this.handlerResponded(response, (params ? params : "")); });
            return result;
        };
        AppServiceBase.prototype.postFromUrl = function (url, obj, header) {
            var _this = this;
            if (!header)
                header = this.rootScope.header;
            var result = this.httpService.post(url, obj, header)
                .then(function (response) { return _this.handlerResponded(response); });
            return result;
        };
        AppServiceBase.$inject = ['$rootScope', '$http'];
        return AppServiceBase;
    }());
    Travel_World.AppServiceBase = AppServiceBase;
})(Travel_World || (Travel_World = {}));
var Travel_World;
(function (Travel_World) {
    var CategoryService = (function (_super) {
        __extends(CategoryService, _super);
        function CategoryService() {
            _super.apply(this, arguments);
        }
        CategoryService.prototype.getById = function (id) {
            return _super.prototype.getByIdFromUrl.call(this, appConfig.serviceUrls().category.listAll, id);
        };
        CategoryService.prototype.listAll = function () {
            return _super.prototype.listAllFromUrl.call(this, appConfig.serviceUrls().category.listAll);
        };
        CategoryService.prototype.deleteCategory = function (id) {
            return _super.prototype.removeByUrl.call(this, appConfig.serviceUrls().category.deleteCategory, id);
        };
        CategoryService.prototype.deleteCategoryAlot = function (categories) {
            return _super.prototype.postFromUrl.call(this, appConfig.serviceUrls().category.deleteAlotCategories, categories);
        };
        CategoryService.prototype.editCategory = function (category) {
            return _super.prototype.updateByUrl.call(this, appConfig.serviceUrls().category.editCategory, category);
        };
        CategoryService.prototype.saveCategory = function (category) {
            return _super.prototype.postFromUrl.call(this, appConfig.serviceUrls().category.saveCategory, category);
        };
        return CategoryService;
    }(Travel_World.AppServiceBase));
    Travel_World.CategoryService = CategoryService;
    angular.module(appConfig.appName).service("CategoryService", CategoryService);
})(Travel_World || (Travel_World = {}));
var Travel_World;
(function (Travel_World) {
    var ContinentService = (function (_super) {
        __extends(ContinentService, _super);
        function ContinentService() {
            _super.apply(this, arguments);
        }
        ContinentService.prototype.getById = function (id) {
            return _super.prototype.getByIdFromUrl.call(this, appConfig.serviceUrls().continent.listAll, id);
        };
        ContinentService.prototype.listAll = function () {
            return _super.prototype.listAllFromUrl.call(this, appConfig.serviceUrls().continent.listAll);
        };
        ContinentService.prototype.deleteContinent = function (id) {
            return _super.prototype.removeByUrl.call(this, appConfig.serviceUrls().continent.deleteContinent, id);
        };
        ContinentService.prototype.deleteContinentAlot = function (continents) {
            return _super.prototype.postFromUrl.call(this, appConfig.serviceUrls().continent.deleteAlotContinent, continents);
        };
        ContinentService.prototype.editContinent = function (continent) {
            return _super.prototype.updateByUrl.call(this, appConfig.serviceUrls().continent.editContinent, continent);
        };
        ContinentService.prototype.saveCategory = function (continent) {
            return _super.prototype.postFromUrl.call(this, appConfig.serviceUrls().continent.saveContinent, continent);
        };
        return ContinentService;
    }(Travel_World.AppServiceBase));
    Travel_World.ContinentService = ContinentService;
    angular.module(appConfig.appName).service("ContinentService", ContinentService);
})(Travel_World || (Travel_World = {}));
var Travel_World;
(function (Travel_World) {
    var CountryService = (function (_super) {
        __extends(CountryService, _super);
        function CountryService() {
            _super.apply(this, arguments);
        }
        CountryService.prototype.getById = function (id) {
            return _super.prototype.getByIdFromUrl.call(this, appConfig.serviceUrls().country.listAll, id);
        };
        CountryService.prototype.listAll = function () {
            return _super.prototype.listAllFromUrl.call(this, appConfig.serviceUrls().country.listAll);
        };
        CountryService.prototype.deleteCountry = function (id) {
            return _super.prototype.removeByUrl.call(this, appConfig.serviceUrls().country.deleteCountry, id);
        };
        CountryService.prototype.deleteCountryAlot = function (countries) {
            return _super.prototype.postFromUrl.call(this, appConfig.serviceUrls().country.deleteAlotCountry, countries);
        };
        CountryService.prototype.editCountry = function (country) {
            return _super.prototype.postFromUrl.call(this, appConfig.serviceUrls().country.editCountry, country);
        };
        CountryService.prototype.saveCountry = function (country) {
            return _super.prototype.postFromUrl.call(this, appConfig.serviceUrls().country.saveCountry, country);
        };
        return CountryService;
    }(Travel_World.AppServiceBase));
    Travel_World.CountryService = CountryService;
    angular.module(appConfig.appName).service("CountryService", CountryService);
})(Travel_World || (Travel_World = {}));
var Travel_World;
(function (Travel_World) {
    var CityService = (function (_super) {
        __extends(CityService, _super);
        function CityService() {
            _super.apply(this, arguments);
        }
        CityService.prototype.getById = function (id) {
            return _super.prototype.getByIdFromUrl.call(this, appConfig.serviceUrls().city.listAll, id);
        };
        CityService.prototype.listAll = function () {
            return _super.prototype.listAllFromUrl.call(this, appConfig.serviceUrls().city.listAll);
        };
        CityService.prototype.deleteCity = function (id) {
            return _super.prototype.removeByUrl.call(this, appConfig.serviceUrls().city.deleteCity, id);
        };
        CityService.prototype.deleteCityAlot = function (cities) {
            return _super.prototype.postFromUrl.call(this, appConfig.serviceUrls().city.deleteAlotCity, cities);
        };
        CityService.prototype.editCity = function (city) {
            return _super.prototype.updateByUrl.call(this, appConfig.serviceUrls().city.editCity, city);
        };
        CityService.prototype.saveCity = function (city) {
            return _super.prototype.postFromUrl.call(this, appConfig.serviceUrls().city.saveCity, city);
        };
        return CityService;
    }(Travel_World.AppServiceBase));
    Travel_World.CityService = CityService;
    angular.module(appConfig.appName).service("CityService", CityService);
})(Travel_World || (Travel_World = {}));
var Travel_World;
(function (Travel_World) {
    var AutenticacaoService = (function (_super) {
        __extends(AutenticacaoService, _super);
        function AutenticacaoService($routeParams, $rootScope, $location, $http) {
            _super.call(this, $rootScope, $http);
            this.$routeParams = $routeParams;
            this.$location = $location;
            this.$http = $http;
        }
        AutenticacaoService.prototype.login = function (loginModel) {
            var _this = this;
            var result;
            result = this.autenticacao(loginModel)
                .then(function (response) {
                return _this.setAutenticacao(response);
            });
            return result;
        };
        AutenticacaoService.prototype.logout = function () {
            this.rootScope.token = null;
            this.rootScope.sistemaContexo = null;
            sessionStorage.removeItem(appConfig.auth_token);
            sessionStorage.removeItem(appConfig.auth_sistema_contexto);
            this.refreshHeader();
        };
        AutenticacaoService.prototype.carregaUsuarioAutenticado = function () {
            var _this = this;
            this.rootScope.token = sessionStorage.getItem(appConfig.auth_token);
            if (this.rootScope.token) {
                this.rootScope.sistemaContexo = angular.fromJson(sessionStorage
                    .getItem(appConfig.auth_sistema_contexto));
                this.refreshHeader();
                this.$location.path('/');
            }
            this.rootScope.$on("$routeChangeStart", function (event, next, current) {
                if (_this.rootScope.token == null) {
                    _this.$location.path('/login');
                }
            });
        };
        AutenticacaoService.prototype.autenticacao = function (login) {
            var dt = "grant_type=password" + "&username=" + login.email + "&password=" + login.password;
            var header = { headers: { 'Content-Type': 'application/x-www-form-urlencoded' } };
            return _super.prototype.postFromUrl.call(this, appConfig.serviceUrls().autenticacao.sistema, dt, header);
        };
        AutenticacaoService.prototype.setAutenticacao = function (response) {
            sessionStorage.setItem(appConfig.auth_token, response.access_token);
            sessionStorage.setItem(appConfig.auth_sistema_contexto, response.sistema_contexto);
            this.carregaUsuarioAutenticado();
            return response;
        };
        AutenticacaoService.prototype.refreshHeader = function () {
            this.rootScope.header = {};
            if (this.rootScope.token && this.rootScope.sistemaContexo) {
                this.rootScope.header = {
                    headers: {
                        "Content-Type": "application/json; charset=UTF-8",
                        'Authorization': 'Bearer ' + this.rootScope.token
                    }
                };
            }
        };
        AutenticacaoService.$inject = ['$routeParams',
            '$rootScope',
            '$location',
            '$http'];
        return AutenticacaoService;
    }(Travel_World.AppServiceBase));
    Travel_World.AutenticacaoService = AutenticacaoService;
    angular.module(appConfig.appName).service("AutenticacaoService", AutenticacaoService);
})(Travel_World || (Travel_World = {}));
var Travel_World;
(function (Travel_World) {
    var LoginController = (function () {
        function LoginController($routeParams, $rootScope, $location, autenticacaoService, toastr) {
            this.$routeParams = $routeParams;
            this.$location = $location;
            this.$rootScope = $rootScope;
            this.autenticacaoService = autenticacaoService;
            this.toastr = toastr;
            this.loginModel = new Travel_World.LoginModel();
        }
        LoginController.prototype.login = function () {
            var _this = this;
            this.autenticacaoService.login(this.loginModel)
                .then(function (data) {
                _this.toastr.success("Seja bem vindo " + _this.$rootScope.sistemaContexo.usuarioLogado.email, "Você está autenticado");
                _this.$location.url("/");
            })
                .catch(function (response) {
                console.log("erro: " + response);
                _this.toastr.error("Usuário ou senha inválido ", "Erro ao autenticar");
            });
        };
        LoginController.$inject = ['$routeParams',
            '$rootScope',
            '$location',
            'AutenticacaoService',
            'toastr'];
        return LoginController;
    }());
    Travel_World.LoginController = LoginController;
    angular.module(appConfig.appName).controller('LoginController', LoginController);
})(Travel_World || (Travel_World = {}));
var Travel_World;
(function (Travel_World) {
    var LogoutController = (function () {
        function LogoutController($routeParams, $rootScope, $location, toastr) {
            this.$routeParams = $routeParams;
            this.$location = $location;
            this.$rootScope = $rootScope;
            this.toastr = toastr;
            this.loginModel = new Travel_World.LoginModel();
        }
        LogoutController.$inject = ['$routeParams',
            '$rootScope',
            '$location',
            'AutenticacaoService',
            'toastr'];
        return LogoutController;
    }());
    Travel_World.LogoutController = LogoutController;
    angular.module(appConfig.appName).controller('LogoutController', LogoutController);
})(Travel_World || (Travel_World = {}));
var Travel_World;
(function (Travel_World) {
    var SharedController = (function () {
        function SharedController($location) {
            this.$location = $location;
        }
        SharedController.prototype.logout = function () {
            this.$location.path("/logout");
        };
        SharedController.$inject = ['$location'];
        return SharedController;
    }());
    Travel_World.SharedController = SharedController;
    angular.module(appConfig.appName).controller('SharedController', SharedController);
})(Travel_World || (Travel_World = {}));
var Travel_World;
(function (Travel_World) {
    var CategoryController = (function () {
        function CategoryController($location, categoryService, toastr, mdDialog, timeout) {
            this.$location = $location;
            this.categoryService = categoryService;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.timeout = timeout;
            this.categorys = new Array();
            this.selected = [];
            this.limitOptions = [5, 10, 15];
            this.options = {
                rowSelection: true,
                multiSelect: true,
                autoSelect: true,
                decapitate: false,
                largeEditDialog: false,
                boundaryLinks: true,
                limitSelect: true,
                pageSelect: true
            };
            this.query = {
                order: 'name',
                limit: 5,
                page: 1
            };
            this.showCheck = {};
            this.loadCategory();
        }
        CategoryController.prototype.loadCategory = function () {
            var _this = this;
            this.categoryService.listAll()
                .then(function (data) {
                _this.categorys = data;
            })
                .catch(function (response) { return console.log("Não carregou as categorias, erro: " + response); });
        };
        CategoryController.prototype.removeFilter = function () {
            this.filterShow = false;
            this.filterSearch = '';
        };
        ;
        CategoryController.prototype.toggleLimitOptions = function () {
            this.limitOptions = this.limitOptions ? undefined : [5, 10, 15];
        };
        ;
        CategoryController.prototype.loadStuff = function () {
            this.promise = this.timeout(function () {
            }, 500);
        };
        CategoryController.prototype.modalCreateCategory = function (ev) {
            var _this = this;
            this.mdDialog.show({
                controller: "ModalCreateController",
                templateUrl: 'app/views/categoria/modal-create-category.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                controllerAs: 'vm'
            }).finally(function () {
                _this.loadCategory();
                _this.loadStuff();
            });
        };
        CategoryController.prototype.modalEditCategory = function (ev, category) {
            var _this = this;
            this.mdDialog.show({
                controller: "ModalEditController",
                templateUrl: 'app/views/categoria/modal-edit-category.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                controllerAs: 'vm',
                resolve: {
                    category: function () { return category; }
                }
            }).finally(function () {
                _this.selected = new Array();
                _this.loadCategory();
                _this.loadStuff();
            });
        };
        CategoryController.prototype.modalDeleteCategory = function (ev, deleteCategorys) {
            var _this = this;
            this.mdDialog.show({
                controller: "ModalDeleteController",
                templateUrl: 'app/views/categoria/modal-delete-category.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                controllerAs: 'vm',
                resolve: {
                    deleteCategorys: function () { return deleteCategorys; }
                }
            }).finally(function () {
                _this.selected = new Array();
                _this.loadCategory();
                _this.loadStuff();
            });
        };
        CategoryController.$inject = ['$location', 'CategoryService', 'toastr', '$mdDialog', '$timeout'];
        return CategoryController;
    }());
    Travel_World.CategoryController = CategoryController;
    angular.module(appConfig.appName).controller('CategoryController', CategoryController);
})(Travel_World || (Travel_World = {}));
var Travel_World;
(function (Travel_World) {
    var ModalCreateController = (function () {
        function ModalCreateController(categoryService, toastr, mdDialog) {
            this.categoryService = categoryService;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.category = new Travel_World.Category();
        }
        ModalCreateController.prototype.createCategory = function () {
            var _this = this;
            this.categoryService.saveCategory(this.category)
                .then(function (data) {
                _this.mdDialog.cancel();
                _this.toastr.success("Categoria criada com sucesso!");
            })
                .catch(function (response) {
                _this.toastr.error('Categoria não pode ser criada!');
            });
        };
        ModalCreateController.prototype.cancel = function () {
            console.log("cancel");
            this.mdDialog.cancel();
        };
        ModalCreateController.$inject = ['CategoryService', 'toastr', '$mdDialog'];
        return ModalCreateController;
    }());
    Travel_World.ModalCreateController = ModalCreateController;
    angular.module(appConfig.appName).controller('ModalCreateController', ModalCreateController);
})(Travel_World || (Travel_World = {}));
var Travel_World;
(function (Travel_World) {
    var ModalEditController = (function () {
        function ModalEditController(categoryService, toastr, mdDialog, category) {
            this.categoryService = categoryService;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.category = category;
        }
        ModalEditController.prototype.editCategory = function () {
            var _this = this;
            console.log(this.category);
            this.categoryService.editCategory(this.category)
                .then(function (data) {
                _this.mdDialog.cancel();
                _this.toastr.success("Categoria editada com sucesso!");
            })
                .catch(function (response) {
                _this.toastr.error('Categoria não pode ser editada!');
            });
        };
        ModalEditController.prototype.cancel = function () {
            console.log("cancel");
            this.mdDialog.cancel();
        };
        ModalEditController.$inject = ['CategoryService', 'toastr', '$mdDialog', 'category'];
        return ModalEditController;
    }());
    Travel_World.ModalEditController = ModalEditController;
    angular.module(appConfig.appName).controller('ModalEditController', ModalEditController);
})(Travel_World || (Travel_World = {}));
var Travel_World;
(function (Travel_World) {
    var ModalDeleteController = (function () {
        function ModalDeleteController(categoryService, toastr, mdDialog, deleteCategorys) {
            this.categoryService = categoryService;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.deleteCategorys = deleteCategorys;
        }
        ModalDeleteController.prototype.deleteCategory = function () {
            var _this = this;
            this.categoryService.deleteCategoryAlot(this.deleteCategorys)
                .then(function (data) {
                if (data.length > 1)
                    _this.toastr.success("Categorias excluidas com sucesso!");
                else
                    _this.toastr.success("Categoria excluida com sucesso!");
                _this.mdDialog.cancel();
            })
                .catch(function (response) {
                _this.toastr.error('Categoria não pode ser excluida!');
            });
        };
        ModalDeleteController.prototype.cancel = function () {
            console.log("cancel");
            this.mdDialog.cancel();
        };
        ModalDeleteController.$inject = ['CategoryService', 'toastr', '$mdDialog', 'deleteCategorys'];
        return ModalDeleteController;
    }());
    Travel_World.ModalDeleteController = ModalDeleteController;
    angular.module(appConfig.appName).controller('ModalDeleteController', ModalDeleteController);
})(Travel_World || (Travel_World = {}));
var Travel_World;
(function (Travel_World) {
    var ContinentController = (function () {
        function ContinentController($location, continentService, toastr, mdDialog, timeout) {
            this.$location = $location;
            this.continentService = continentService;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.timeout = timeout;
            this.continents = new Array();
            this.selected = [];
            this.limitOptions = [5, 10, 15];
            this.options = {
                rowSelection: true,
                multiSelect: true,
                autoSelect: true,
                decapitate: false,
                largeEditDialog: false,
                boundaryLinks: true,
                limitSelect: true,
                pageSelect: true
            };
            this.query = {
                order: 'name',
                limit: 5,
                page: 1
            };
            this.showCheck = {};
            this.loadContinent();
        }
        ContinentController.prototype.loadContinent = function () {
            var _this = this;
            this.continentService.listAll()
                .then(function (data) {
                _this.continents = data;
            })
                .catch(function (response) { return console.log("Não carregou os continents, erro: " + response); });
        };
        ContinentController.prototype.removeFilter = function () {
            this.filterShow = false;
            this.filterSearch = '';
        };
        ;
        ContinentController.prototype.toggleLimitOptions = function () {
            this.limitOptions = this.limitOptions ? undefined : [5, 10, 15];
        };
        ;
        ContinentController.prototype.loadStuff = function () {
            this.promise = this.timeout(function () {
            }, 300);
        };
        ContinentController.prototype.modalCreateContinent = function (ev) {
            var _this = this;
            this.mdDialog.show({
                controller: "ModalCreateContinentController",
                templateUrl: 'app/views/continent/modal-create-continent.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                controllerAs: 'vm'
            }).finally(function () {
                _this.loadContinent();
                _this.loadStuff();
            });
        };
        ContinentController.prototype.modalEditContinent = function (ev, continent) {
            var _this = this;
            this.mdDialog.show({
                controller: "ModalEditContinentController",
                templateUrl: 'app/views/continent/modal-edit-continent.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                controllerAs: 'vm',
                resolve: {
                    continent: function () { return continent; }
                }
            }).finally(function (data) {
                _this.loadContinent();
                _this.selected = new Array();
                _this.loadStuff();
            });
        };
        ContinentController.prototype.modalDeleteContinent = function (ev, deleteContinents) {
            var _this = this;
            this.mdDialog.show({
                controller: "ModalDeleteContinentController",
                templateUrl: 'app/views/continent/modal-delete-continent.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                controllerAs: 'vm',
                resolve: {
                    deleteContinents: function () { return deleteContinents; }
                }
            }).finally(function (data) {
                _this.loadContinent();
                _this.loadStuff();
                _this.selected = new Array();
            });
        };
        ContinentController.$inject = ['$location', 'ContinentService', 'toastr', '$mdDialog', '$timeout'];
        return ContinentController;
    }());
    Travel_World.ContinentController = ContinentController;
    angular.module(appConfig.appName).controller('ContinentController', ContinentController);
})(Travel_World || (Travel_World = {}));
var Travel_World;
(function (Travel_World) {
    var ModalCreateContinentController = (function () {
        function ModalCreateContinentController(continentService, toastr, mdDialog) {
            this.continentService = continentService;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.continent = new Travel_World.Continent();
        }
        ModalCreateContinentController.prototype.createContinent = function () {
            var _this = this;
            this.continentService.saveCategory(this.continent)
                .then(function (data) {
                _this.mdDialog.cancel();
                _this.toastr.success("Continente criado com sucesso!");
            })
                .catch(function (response) {
                _this.toastr.error('Continente não pode ser criada!');
            });
        };
        ModalCreateContinentController.prototype.cancel = function () {
            console.log("cancel");
            this.mdDialog.cancel();
        };
        ModalCreateContinentController.$inject = ['ContinentService', 'toastr', '$mdDialog'];
        return ModalCreateContinentController;
    }());
    Travel_World.ModalCreateContinentController = ModalCreateContinentController;
    angular.module(appConfig.appName).controller('ModalCreateContinentController', ModalCreateContinentController);
})(Travel_World || (Travel_World = {}));
var Travel_World;
(function (Travel_World) {
    var ModalEditContinentController = (function () {
        function ModalEditContinentController(continentService, toastr, mdDialog, continent) {
            this.continentService = continentService;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.continent = continent;
        }
        ModalEditContinentController.prototype.editContinent = function () {
            var _this = this;
            this.continentService.editContinent(this.continent)
                .then(function (data) {
                _this.mdDialog.cancel();
                _this.toastr.success("Continente editado com sucesso!");
            })
                .catch(function (response) {
                _this.toastr.error('Continente não pode ser editado!');
            });
        };
        ModalEditContinentController.prototype.cancel = function () {
            console.log("cancel");
            this.mdDialog.cancel();
        };
        ModalEditContinentController.$inject = ['ContinentService', 'toastr', '$mdDialog', 'continent'];
        return ModalEditContinentController;
    }());
    Travel_World.ModalEditContinentController = ModalEditContinentController;
    angular.module(appConfig.appName).controller('ModalEditContinentController', ModalEditContinentController);
})(Travel_World || (Travel_World = {}));
var Travel_World;
(function (Travel_World) {
    var ModalDeleteContinentController = (function () {
        function ModalDeleteContinentController(continentService, toastr, mdDialog, deleteContinents) {
            this.continentService = continentService;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.deleteContinents = deleteContinents;
        }
        ModalDeleteContinentController.prototype.deleteContinent = function () {
            var _this = this;
            this.continentService.deleteContinentAlot(this.deleteContinents)
                .then(function (data) {
                if (data.length > 1)
                    _this.toastr.success("Continentes excluidos com sucesso!");
                else
                    _this.toastr.success("Continente excluido com sucesso!");
                _this.mdDialog.cancel();
            })
                .catch(function (response) {
                _this.toastr.error('Continente não pode ser excluido!');
            });
        };
        ModalDeleteContinentController.prototype.cancel = function () {
            console.log("cancel");
            this.mdDialog.cancel();
        };
        ModalDeleteContinentController.$inject = ['ContinentService', 'toastr', '$mdDialog', 'deleteContinents'];
        return ModalDeleteContinentController;
    }());
    Travel_World.ModalDeleteContinentController = ModalDeleteContinentController;
    angular.module(appConfig.appName).controller('ModalDeleteContinentController', ModalDeleteContinentController);
})(Travel_World || (Travel_World = {}));
var Travel_World;
(function (Travel_World) {
    var CountryController = (function () {
        function CountryController($location, countryService, continentService, toastr, mdDialog, timeout) {
            this.$location = $location;
            this.countryService = countryService;
            this.continentService = continentService;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.timeout = timeout;
            this.countries = new Array();
            this.selected = [];
            this.limitOptions = [5, 10, 15];
            this.options = {
                rowSelection: true,
                multiSelect: true,
                autoSelect: true,
                decapitate: false,
                largeEditDialog: false,
                boundaryLinks: true,
                limitSelect: true,
                pageSelect: true
            };
            this.query = {
                order: 'name',
                limit: 5,
                page: 1
            };
            this.showCheck = {};
            this.continents = new Array();
            this.loadCountry();
            this.loadContinents();
        }
        CountryController.prototype.loadCountry = function () {
            var _this = this;
            this.countryService.listAll()
                .then(function (data) {
                _this.countries = data;
            })
                .catch(function (response) { return console.log("Não carregou os continents, erro: " + response); });
        };
        CountryController.prototype.removeFilter = function () {
            this.filterShow = false;
            this.filterSearch = '';
        };
        ;
        CountryController.prototype.toggleLimitOptions = function () {
            this.limitOptions = this.limitOptions ? undefined : [5, 10, 15];
        };
        ;
        CountryController.prototype.loadStuff = function () {
            this.promise = this.timeout(function () {
            }, 300);
        };
        CountryController.prototype.loadContinents = function () {
            var _this = this;
            this.continentService.listAll()
                .then(function (data) {
                _this.continents = data;
            })
                .catch(function (response) { return console.log("Não carregou os continents, erro: " + response); });
        };
        CountryController.prototype.modalCreateCountry = function (ev) {
            var _this = this;
            var continents = this.continents;
            this.mdDialog.show({
                controller: "ModalCreateCountryController",
                templateUrl: 'app/views/country/modal-create-country.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                controllerAs: 'vm',
                resolve: {
                    continents: function () { return continents; }
                }
            }).finally(function () {
                _this.loadCountry();
                _this.loadContinents();
                _this.loadStuff();
            });
        };
        CountryController.prototype.modalEditCountry = function (ev, country) {
            var _this = this;
            this.mdDialog.show({
                controller: "ModalEditCountryController",
                templateUrl: 'app/views/country/modal-edit-country.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                controllerAs: 'vm',
                resolve: {
                    country: function () { return country; },
                    continents: function () { return _this.continents; }
                }
            }).finally(function (data) {
                _this.loadCountry();
                _this.loadContinents();
                _this.selected = new Array();
                _this.loadStuff();
            });
        };
        CountryController.prototype.modalDeleteCountry = function (ev, deleteCountries) {
            var _this = this;
            this.mdDialog.show({
                controller: "ModalDeleteCountryController",
                templateUrl: 'app/views/country/modal-delete-country.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                controllerAs: 'vm',
                resolve: {
                    deleteCountries: function () { return deleteCountries; }
                }
            }).finally(function (data) {
                _this.loadCountry();
                _this.loadContinents();
                _this.loadStuff();
                _this.selected = new Array();
            });
        };
        CountryController.$inject = ['$location', 'CountryService', 'ContinentService', 'toastr', '$mdDialog', '$timeout'];
        return CountryController;
    }());
    Travel_World.CountryController = CountryController;
    angular.module(appConfig.appName).controller('CountryController', CountryController);
})(Travel_World || (Travel_World = {}));
var Travel_World;
(function (Travel_World) {
    var ModalCreateCountryController = (function () {
        function ModalCreateCountryController(countryService, continents, toastr, mdDialog) {
            this.countryService = countryService;
            this.continents = continents;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.country = new Travel_World.Country();
        }
        ModalCreateCountryController.prototype.createCountry = function () {
            var _this = this;
            console.log(this.country);
            this.countryService.saveCountry(this.country)
                .then(function (data) {
                _this.mdDialog.cancel();
                _this.toastr.success("Pais criado com sucesso!");
            })
                .catch(function (response) {
                _this.toastr.error('Pais não pode ser criado!');
            });
        };
        ModalCreateCountryController.prototype.cancel = function () {
            this.mdDialog.cancel();
        };
        ModalCreateCountryController.$inject = ['CountryService', 'continents', 'toastr', '$mdDialog'];
        return ModalCreateCountryController;
    }());
    Travel_World.ModalCreateCountryController = ModalCreateCountryController;
    angular.module(appConfig.appName).controller('ModalCreateCountryController', ModalCreateCountryController);
})(Travel_World || (Travel_World = {}));
var Travel_World;
(function (Travel_World) {
    var ModalEditCountryController = (function () {
        function ModalEditCountryController(countryService, continents, toastr, mdDialog, country) {
            this.countryService = countryService;
            this.continents = continents;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.country = country;
            this.countryEdit = new Travel_World.Country();
            this.countryEdit = this.country;
        }
        ModalEditCountryController.prototype.editCountry = function (country) {
            var _this = this;
            console.log(this.country);
            this.countryService.editCountry(country)
                .then(function (data) {
                _this.mdDialog.cancel();
                _this.toastr.success("Pais editado com sucesso!");
            })
                .catch(function (response) {
                _this.toastr.error('Pais não pode ser editado!');
            });
        };
        ModalEditCountryController.prototype.cancel = function () {
            console.log("cancel");
            this.mdDialog.cancel();
        };
        ModalEditCountryController.$inject = ['CountryService', 'continents', 'toastr', '$mdDialog', 'country'];
        return ModalEditCountryController;
    }());
    Travel_World.ModalEditCountryController = ModalEditCountryController;
    angular.module(appConfig.appName).controller('ModalEditCountryController', ModalEditCountryController);
})(Travel_World || (Travel_World = {}));
var Travel_World;
(function (Travel_World) {
    var ModalDeleteCountryController = (function () {
        function ModalDeleteCountryController(countryService, toastr, mdDialog, deleteCountries) {
            this.countryService = countryService;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.deleteCountries = deleteCountries;
        }
        ModalDeleteCountryController.prototype.deleteCountry = function () {
            var _this = this;
            this.countryService.deleteCountryAlot(this.deleteCountries)
                .then(function (data) {
                if (data.length > 1)
                    _this.toastr.success("Paises excluidos com sucesso!");
                else
                    _this.toastr.success("Pais excluido com sucesso!");
                _this.mdDialog.cancel();
            })
                .catch(function (response) {
                _this.toastr.error('Pais não pode ser excluido!');
            });
        };
        ModalDeleteCountryController.prototype.cancel = function () {
            console.log("cancel");
            this.mdDialog.cancel();
        };
        ModalDeleteCountryController.$inject = ['CountryService', 'toastr', '$mdDialog', 'deleteCountries'];
        return ModalDeleteCountryController;
    }());
    Travel_World.ModalDeleteCountryController = ModalDeleteCountryController;
    angular.module(appConfig.appName).controller('ModalDeleteCountryController', ModalDeleteCountryController);
})(Travel_World || (Travel_World = {}));
var Travel_World;
(function (Travel_World) {
    var CityController = (function () {
        function CityController($location, cityService, continentService, toastr, mdDialog, timeout) {
            this.$location = $location;
            this.cityService = cityService;
            this.continentService = continentService;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.timeout = timeout;
            this.cities = new Array();
            this.continents = new Array();
            this.selected = [];
            this.limitOptions = [5, 10, 15];
            this.options = {
                rowSelection: true,
                multiSelect: true,
                autoSelect: true,
                decapitate: false,
                largeEditDialog: false,
                boundaryLinks: true,
                limitSelect: true,
                pageSelect: true
            };
            this.query = {
                order: 'name',
                limit: 5,
                page: 1
            };
            this.showCheck = {};
            this.loadCity();
            this.loadContinents();
        }
        CityController.prototype.loadCity = function () {
            var _this = this;
            this.cityService.listAll()
                .then(function (data) {
                _this.cities = data;
            })
                .catch(function (response) { return console.log("Não carregou as cidades, erro: " + response); });
        };
        CityController.prototype.removeFilter = function () {
            this.filterShow = false;
            this.filterSearch = '';
        };
        ;
        CityController.prototype.toggleLimitOptions = function () {
            this.limitOptions = this.limitOptions ? undefined : [5, 10, 15];
        };
        ;
        CityController.prototype.loadStuff = function () {
            this.promise = this.timeout(function () {
            }, 300);
        };
        CityController.prototype.loadContinents = function () {
            var _this = this;
            this.continentService.listAll()
                .then(function (data) {
                _this.continents = data;
            })
                .catch(function (response) { return console.log("Não carregou os continents, erro: " + response); });
        };
        CityController.prototype.modalCreateCity = function (ev) {
            var _this = this;
            this.mdDialog.show({
                controller: "ModalCreateCityController",
                templateUrl: 'app/views/city/modal-create-city.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                controllerAs: 'vm',
                resolve: {
                    continents: function () { return _this.continents; }
                }
            }).finally(function () {
                _this.loadContinents();
                _this.loadCity();
                _this.loadStuff();
            });
        };
        CityController.prototype.modalEditCity = function (ev, city) {
            var _this = this;
            this.mdDialog.show({
                controller: "ModalEditCityController",
                templateUrl: 'app/views/country/modal-edit-country.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                controllerAs: 'vm',
                resolve: {
                    continents: function () { return _this.continents; },
                    city: function () { return city; }
                }
            }).finally(function (data) {
                _this.loadCity();
                _this.loadContinents();
                _this.selected = new Array();
                _this.loadStuff();
            });
        };
        CityController.prototype.modalDeleteCity = function (ev, deleteCities) {
            var _this = this;
            this.mdDialog.show({
                controller: "ModalDeleteCityController",
                templateUrl: 'app/views/city/modal-delete-city.html',
                targetEvent: ev,
                clickOutsideToClose: true,
                controllerAs: 'vm',
                resolve: {
                    deleteCities: function () { return deleteCities; }
                }
            }).finally(function (data) {
                _this.loadCity();
                _this.loadContinents();
                _this.loadStuff();
                _this.selected = new Array();
            });
        };
        CityController.$inject = ['$location', 'CityService', 'ContinentService', 'toastr', '$mdDialog', '$timeout'];
        return CityController;
    }());
    Travel_World.CityController = CityController;
    angular.module(appConfig.appName).controller('CityController', CityController);
})(Travel_World || (Travel_World = {}));
var Travel_World;
(function (Travel_World) {
    var ModalCreateCityController = (function () {
        function ModalCreateCityController(cityService, continents, toastr, mdDialog) {
            this.cityService = cityService;
            this.continents = continents;
            this.filterCountries = new Array();
            this.filterContinents = new Array();
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.city = new Travel_World.City();
            this.continent = new Travel_World.Continent();
            this.populationContinentExistCountry();
        }
        ModalCreateCityController.prototype.createCity = function () {
            var _this = this;
            console.log(this.city);
            this.cityService.saveCity(this.city)
                .then(function (data) {
                _this.mdDialog.cancel();
                _this.toastr.success("Cidade criada com sucesso!");
            })
                .catch(function (response) {
                _this.toastr.error('Cidade não pode ser criada!');
            });
        };
        ModalCreateCityController.prototype.populationContinentExistCountry = function () {
            if (this.continents) {
                this.filterContinents = this.continents.filter(function (c) {
                    return c.countries.length > 0;
                });
            }
        };
        ModalCreateCityController.prototype.queryCountryTheContinent = function (continent) {
            if (continent) {
                this.filterCountries = continent.countries.filter(function (c) { return c; });
                this.city.country = this.filterCountries[0];
            }
        };
        ModalCreateCityController.prototype.cancel = function () {
            this.mdDialog.cancel();
        };
        ModalCreateCityController.$inject = ['CityService', 'continents', 'toastr', '$mdDialog'];
        return ModalCreateCityController;
    }());
    Travel_World.ModalCreateCityController = ModalCreateCityController;
    angular.module(appConfig.appName).controller('ModalCreateCityController', ModalCreateCityController);
})(Travel_World || (Travel_World = {}));
var Travel_World;
(function (Travel_World) {
    var ModalEditCityController = (function () {
        function ModalEditCityController(cityService, continents, toastr, mdDialog, city) {
            this.cityService = cityService;
            this.continents = continents;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.city = city;
            this.cityEdit = new Travel_World.City();
            this.cityEdit = this.city;
        }
        ModalEditCityController.prototype.editCity = function (city) {
            var _this = this;
            this.cityService.editCity(city)
                .then(function (data) {
                _this.mdDialog.cancel();
                _this.toastr.success("Cidade editada com sucesso!");
            })
                .catch(function (response) {
                _this.toastr.error('Pais não pode ser editado!');
            });
        };
        ModalEditCityController.prototype.cancel = function () {
            this.mdDialog.cancel();
        };
        ModalEditCityController.$inject = ['CityService', 'continents', 'countries', 'toastr', '$mdDialog', 'city'];
        return ModalEditCityController;
    }());
    Travel_World.ModalEditCityController = ModalEditCityController;
    angular.module(appConfig.appName).controller('ModalEditCityController', ModalEditCityController);
})(Travel_World || (Travel_World = {}));
var Travel_World;
(function (Travel_World) {
    var ModalDeleteCityController = (function () {
        function ModalDeleteCityController(cityService, toastr, mdDialog, deleteCities) {
            this.cityService = cityService;
            this.toastr = toastr;
            this.mdDialog = mdDialog;
            this.deleteCities = deleteCities;
        }
        ModalDeleteCityController.prototype.deleteCity = function () {
            var _this = this;
            this.cityService.deleteCityAlot(this.deleteCities)
                .then(function (data) {
                if (data.length > 1)
                    _this.toastr.success("Cidades excluidas com sucesso!");
                else
                    _this.toastr.success("Cidade excluida com sucesso!");
                _this.mdDialog.cancel();
            })
                .catch(function (response) {
                _this.toastr.error('Cidade não pode ser excluida!');
            });
        };
        ModalDeleteCityController.prototype.cancel = function () {
            this.mdDialog.cancel();
        };
        ModalDeleteCityController.$inject = ['CityService', 'toastr', '$mdDialog', 'deleteCities'];
        return ModalDeleteCityController;
    }());
    Travel_World.ModalDeleteCityController = ModalDeleteCityController;
    angular.module(appConfig.appName).controller('ModalDeleteCityController', ModalDeleteCityController);
})(Travel_World || (Travel_World = {}));
var Travel_World;
(function (Travel_World) {
    var SideBarController = (function () {
        function SideBarController() {
            this.setPage();
        }
        SideBarController.prototype.setPage = function () {
            this.currentNavItem = 'page1';
            console.log("executou" + this.currentNavItem);
        };
        SideBarController.$inject = [];
        return SideBarController;
    }());
    Travel_World.SideBarController = SideBarController;
    angular.module(appConfig.appName).controller('SideBarController', SideBarController);
})(Travel_World || (Travel_World = {}));
var Travel_World;
(function (Travel_World) {
    var HomeController = (function () {
        function HomeController() {
            this.imagePath = new Array();
            this.imagePath.push('app/assets/img/teste/foto6.jpg');
            this.imagePath.push('app/assets/img/teste/foto2.jpg');
            this.imagePath.push('app/assets/img/teste/foto3.jpg');
            this.imagePath.push('app/assets/img/teste/foto4.jpg');
            this.imagePath.push('app/assets/img/teste/foto7.jpg');
            this.imagePath.push('app/assets/img/teste/foto8.jpg');
            this.imagePath.push('app/assets/img/teste/foto9.jpg');
            this.selected = [];
            this.limitOptions = [5, 10, 15];
            this.options = {
                rowSelection: true,
                multiSelect: true,
                autoSelect: true,
                decapitate: false,
                largeEditDialog: false,
                boundaryLinks: true,
                limitSelect: true,
                pageSelect: true
            };
            this.query = {
                order: 'name',
                limit: 5,
                page: 1
            };
            this.showCheck = {};
            this.currentPage = 0;
            this.paging = {
                total: 100,
                current: 1
            };
        }
        HomeController.prototype.loadPages = function () {
            console.log('Current page is : ' + this.paging.current);
            this.currentPage = this.paging.current;
        };
        ;
        HomeController.prototype.removeFilter = function () {
            this.filterShow = false;
            this.filterSearch = '';
        };
        ;
        HomeController.prototype.toggleLimitOptions = function () {
            this.limitOptions = this.limitOptions ? undefined : [5, 10, 15];
        };
        ;
        HomeController.$inject = [];
        return HomeController;
    }());
    Travel_World.HomeController = HomeController;
    angular.module(appConfig.appName).controller('HomeController', HomeController);
})(Travel_World || (Travel_World = {}));
